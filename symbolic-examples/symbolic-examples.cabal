cabal-version:      3.0

name:               symbolic-examples
version:            0.1.0.0
tested-with:        GHC == 9.6.6
synopsis:           ZkFold Symbolic examples
homepage:           https://zkfold.io/
category:           Cryptography, DSL, Math, Symbolic Computation
author:             Vladimir Sinyakov, Pavel Sokolov, Vladimir Morozov, Eitan Chatav, Ilya Baryshnikov, Anna Hovanskaya, Evgenii Samodelov
maintainer:         vlasin@zkfold.io
license:            MIT
license-file:       LICENSE
build-type:         Simple

description:
  This package contains the examples generated using the the zkFold Symbolic framework.
  It also contains a benchmark for compiling the examples into arithmetic circuits and evaluating those circuits on a set of inputs.

Flag Pedantic
    Description: Enable pedantic build with -Werror
    Manual: True
    Default: False

common options
    default-language: Haskell2010
    ghc-options:
      -fwarn-redundant-constraints
      -Wall
      -Wcompat
      -Widentities
      -Wincomplete-record-updates
      -Wincomplete-uni-patterns
      -Wnoncanonical-monad-instances
      -Wpartial-fields
      -Wredundant-constraints
      -Wunused-packages
      -O2
      -threaded
    if flag(pedantic)
      ghc-options:
        -Werror
    default-extensions:
      BangPatterns,
      BinaryLiterals,
      ConstraintKinds,
      DataKinds,
      DefaultSignatures,
      DeriveDataTypeable,
      DeriveFoldable,
      DeriveFunctor,
      DeriveGeneric,
      DeriveTraversable,
      ExistentialQuantification,
      FlexibleContexts,
      FlexibleInstances,
      FunctionalDependencies,
      GADTs,
      GeneralizedNewtypeDeriving,
      InstanceSigs,
      KindSignatures,
      LambdaCase,
      MultiParamTypeClasses,
      MultiWayIf,
      NamedFieldPuns,
      NoImplicitPrelude,
      NoStarIsType,
      NumericUnderscores,
      OverloadedStrings,
      OverloadedLabels,
      PolyKinds,
      RankNTypes,
      RecordWildCards,
      ScopedTypeVariables,
      StandaloneDeriving,
      StandaloneKindSignatures,
      TupleSections,
      TypeApplications,
      TypeFamilies,
      ViewPatterns

common options-exe
    import: options
    ghc-options:
      -rtsopts
    ghc-prof-options:
      -with-rtsopts=-pj

library
    import: options
    exposed-modules:
      ZkFold.Symbolic.Examples
    other-modules:
      Examples.BatchTransfer
      Examples.Blake2b
      Examples.ByteString
      Examples.Conditional
      Examples.Constant
      Examples.Eq
      Examples.FFA
      Examples.Fibonacci
      Examples.LEQ
      Examples.MiMCHash
      Examples.MerkleTree
      Examples.ReverseList
      Examples.RSA
      Examples.UInt
      Examples.Ed25519
      Examples.Commitment
    build-depends:
      adjunctions,
      base,
      deepseq,
      symbolic-base,
      symbolic-cardano,
    hs-source-dirs: src

benchmark bench-compilation-evaluation
    import:           options-exe
    main-is:          BenchCompiler.hs
    hs-source-dirs:   bench
    type:             exitcode-stdio-1.0
    ghc-options:
      -fprof-auto
      -fprof-cafs
      -O3
    build-depends:
      adjunctions,
      base,
      binary,
      deepseq,
      symbolic-base,
      symbolic-examples,
      tasty-bench

benchmark compiler-golden-stats
    import:           options-exe
    main-is:          GoldenTest.hs
    hs-source-dirs:   bench
    type:             exitcode-stdio-1.0
    ghc-options:      -O3
    build-depends:
      base,
      bytestring,
      symbolic-base,
      symbolic-examples,
      tasty,
      tasty-golden
